/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.bristermitten.plumber

import com.google.inject.Inject
import com.google.inject.Singleton
import me.bristermitten.plumber.aspect.InjectorHolder
import me.bristermitten.plumber.aspect.PlumberLoader
import org.bukkit.plugin.PluginDescriptionFile
import org.bukkit.plugin.java.JavaPlugin
import org.bukkit.plugin.java.JavaPluginLoader
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import java.io.File
import kotlin.system.measureTimeMillis

/**
 * Main class of Plumber. A Plugin that uses Plumber should extend this instead of
 * [JavaPlugin], as it is responsible for the loading of the framework,
 * and may handle more in the future.
 *
 *
 * This class will be a Singleton throughout the framework, and at the moment doesn't do much
 * else than the initial setup.
 * On that note, in any Plumber plugin, [PlumberPlugin.loadPlumber]
 * should be called in your [JavaPlugin.onEnable] if you override the default [PlumberPlugin.onEnable]
 */

@Singleton
open class PlumberPlugin : JavaPlugin {

    protected val logger: Logger = LoggerFactory.getLogger(javaClass)

    @Inject
    protected lateinit var holder: InjectorHolder

    constructor() : super()
    constructor(loader: JavaPluginLoader?, description: PluginDescriptionFile?, dataFolder: File?, file: File?) : super(loader, description, dataFolder, file)


    /**
     * Default [JavaPlugin.onEnable] implementation.
     * This loads Plumber, and if overridden [loadPlumber] should be called
     */
    override fun onEnable() {
        loadPlumber()
    }


    /**
     * Load the framework.
     * This entails scanning classes in the classpath, creating instances and injectors
     * through Guice, and loading all necessary aspects.
     * This should be called before anything else in [onEnable]
     */
    protected fun loadPlumber() {
        logger.info("Plumber loading for Plugin {}...", name)

        val length = measureTimeMillis {
            PlumberLoader(this).loadPlumber()
        }
        logger.info("Plumber loaded in {} ms!", length)
    }


    /**
     * Helper method to get an instance of a class with Guice
     */
    fun <T> getInstance(clazz: Class<T>): T {
        return holder.injector.getInstance(clazz)
    }
}

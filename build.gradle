plugins {
    id 'java-library'
    id 'maven'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.3.50'
    id "com.github.johnrengelman.shadow" version "5.1.0"
}

group = 'me.bristermitten'

repositories {
    jcenter()
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://jitpack.io' }
    maven { url "http://repo.aikar.co/nexus/content/groups/aikar/" }
}

dependencies {
    api 'com.google.guava:guava:21.0'
    api 'com.google.inject:guice:4.2.2'

    api 'com.google.inject.extensions:guice-assistedinject:4.2.2'

    implementation 'io.github.classgraph:classgraph:4.8.47'

    if (project.hasProperty("ci")) {
        api files("lib/locales.jar")
        api files("lib/table.jar")
        api files("lib/minecraft-timings-1.0.4.jar")
        api files("lib/expiringmap-0.5.8.jar")
        api files("lib/acf-paper-0.5.0-SNAPSHOT.jar")
        api files("lib/acf-bukkit-0.5.0-SNAPSHOT.jar")
        api files("lib/acf-core-0.5.0-SNAPSHOT.jar")
    } else api "co.aikar:acf-paper:0.5.0-SNAPSHOT"

    compile 'org.slf4j:slf4j-log4j12:1.8.0-alpha2'

    compile 'dev.misfitlabs.kotlinguice4:kotlin-guice:1.4.1'
    implementation('com.github.knightzmc:reflector:b860a37b8eee5b9ca804fef5d983cc7278727790') {
        exclude group: 'junit'
    }

    api('org.spigotmc:spigot-api:1.12.2-R0.1-SNAPSHOT') {
        exclude group: 'junit'
    }
    implementation('org.spigotmc:spigot:1.12.2-R0.1-SNAPSHOT') {
        exclude group: 'junit'
    }


    testApi 'com.github.knightzmc:mockbukkit:4afe7bda8bfad66811634e6fae544dcdb52f32a3'
    testImplementation "org.junit.jupiter:junit-jupiter:5.5.2"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = "1.8"
    }
}

compileJava {
    options.compilerArgs += ["-parameters"]
    options.fork = true
}

shadowJar {
    minimize()
    relocate 'co.aikar', 'me.bristermitten.aikar'
    dependencies {
        exclude dependency('com.github.knightzmc:mockbukkit:.*')
        exclude dependency('org.spigotmc:spigot-api:.*')
        exclude dependency('org.spigotmc:spigot:.*')
        exclude dependency('org.bukkit:bukkit:.*')
        exclude dependency('net.md-5:bungeecord-chat:.*')
        exclude dependency('com.google.code.gson:gson:.*')
        exclude dependency('com.google.guava:guava:.*')
        exclude dependency('org.yaml:snakeyaml:.*')
        exclude dependency('commons-lang:commons-lang:.*')
        exclude dependency('junit:junit:.*')
        exclude dependency('com.googlecode.json-simple:json-simple:.*')
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

task createClassScan(type: JavaExec) {
    classpath = sourceSets.test.runtimeClasspath
    dependsOn testClasses

    args = [sourceSets.main.resources.srcDirs[0]]

    main = "BuildTimeClassScan"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}

javadoc {
    source = sourceSets.main.allSource
    include '**/me/bristermitten/plumber/**'
    destinationDir = file('docs')
}
